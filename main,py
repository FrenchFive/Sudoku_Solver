import os
import time

def input_grid():
    grid = []
    print("Enter the sudoku grid, row by row, using zeros for empty cells.")
    print("Separate numbers with spaces.")
    for i in range(9):
        while True:
            try:
                row = input(f"Row {i+1}: ")
                row_values = list(map(int, row.strip().split()))
                if len(row_values) != 9:
                    print("Please enter exactly 9 numbers.")
                    continue
                grid.append(row_values)
                break
            except ValueError:
                print("Invalid input. Please enter numbers separated by spaces.")
    return grid

def print_grid(grid):
    for i in range(9):
        if i % 3 == 0 and i != 0:
            print("-"*21)
        for j in range(9):
            if j % 3 == 0 and j != 0:
                print("| ", end='')
            print(str(grid[i][j]) if grid[i][j] != 0 else '.', end=' ')
        print()
        
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def is_valid(grid, row, col, num):
    # Check if num is in row
    for i in range(9):
        if grid[row][i] == num:
            return False
    # Check if num is in column
    for i in range(9):
        if grid[i][col] == num:
            return False
    # Check if num is in 3x3 subgrid
    start_row = row - row % 3
    start_col = col - col % 3
    for i in range(3):
        for j in range(3):
            if grid[start_row+i][start_col+j] == num:
                return False
    return True

def solve_sudoku(grid):
    for row in range(9):
        for col in range(9):
            if grid[row][col] == 0:
                for num in range(1,10):
                    if is_valid(grid, row, col, num):
                        grid[row][col] = num
                        # Output the grid
                        clear_screen()
                        print_grid(grid)
                        time.sleep(0.01)
                        if solve_sudoku(grid):
                            return True
                        grid[row][col] = 0  # Backtrack
                        # Output the grid after backtracking
                        clear_screen()
                        print_grid(grid)
                        #time.sleep(0.01)
                return False
    return True # Solved

def main():
    grid = input_grid()
    clear_screen()
    print("Solving the sudoku...")
    time.sleep(1)
    start = time.time()
    if solve_sudoku(grid):
        end = time.time()
        elapsed_time = end - start
        clear_screen()
        print("Sudoku solved:")
        print_grid(grid)
        minutes, seconds = divmod(elapsed_time, 60)
        hours, minutes = divmod(minutes, 60)
        milliseconds = (elapsed_time - int(elapsed_time)) * 1000
        print(f"Solved in {int(hours):02d}:{int(minutes):02d}:{int(seconds):02d}.{int(milliseconds):03d}")    
    else:
        print("No solution exists.")

if __name__ == "__main__":
    main()
